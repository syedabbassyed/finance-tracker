// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  INCOME
  EXPENSE
}

model AccountType {
  id       String    @id @default(uuid())
  name     String
  accounts Account[]
}

model Category {
  id           String          @id @default(uuid())
  name         String
  type         TransactionType
  transactions Transaction[]
}

model User {
  id           String        @id @default(uuid())
  name         String
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now())
  transactions Transaction[]
  accounts     Account[]
  goals        Goal[]
  bills        Bill[]
}

model Account {
  id           String        @id @default(uuid())
  name         String
  balance      Float         @default(0)
  createdAt    DateTime      @default(now())
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  type         AccountType   @relation(fields: [typeId], references: [id])
  typeId       String
  transactions Transaction[]
}

model Transaction {
  id         String          @id @default(uuid())
  amount     Float
  type       TransactionType
  date       DateTime
  user       User            @relation(fields: [userId], references: [id])
  userId     String
  account    Account         @relation(fields: [accountId], references: [id])
  accountId  String
  category   Category        @relation(fields: [categoryId], references: [id])
  categoryId String
}

model Goal {
  id            String   @id @default(uuid())
  title         String
  targetAmount  Float
  currentAmount Float    @default(0)
  targetDate    DateTime
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
}

model Bill {
  id        String   @id @default(uuid())
  name      String
  amount    Float
  dueDate   DateTime
  recurring String // "monthly", "yearly", "none"
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}
